<?xml version='1.0' encoding='utf-8'?>

<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->

<rfc xmlns:xi="http://www.w3.org/2001/XInclude" category="std" consensus="true" docName="draft-wilson-dane-pkix-cd-02" ipr="trust200902" updates="6698,7671" obsoletes="" submissionType="IETF" xml:lang="en" tocInclude="true" tocDepth="4" symRefs="true" sortRefs="true" version="3">

  <!-- ***** FRONT MATTER ***** -->

  <front>

    <title abbrev="DANE PKIX Certificate Discovery">PKI-Authenticated Certificate Discovery Using DANE TLSA records</title>
    <seriesInfo name="Internet-Draft" value="draft-wilson-dane-pkix-cd-00" />
    <author fullname="Ash Wilson" initials="A." surname="Wilson">
      <organization>Valimail</organization>
      <address>
        <email>ash.d.wilson@gmail.com</email>
      </address>
    </author>
    <author fullname="Shumon Huque" initials="S." surname="Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <date day="13" month="September" year="2021" />
    <area>Security</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>Internet-Draft</keyword>
    <keyword>DANE</keyword>
    <keyword>DNSSEC</keyword>
    <keyword>PKIX-CD</keyword>
    <keyword>Authentication</keyword>
    <keyword>Client Certificate</keyword>
    <keyword>Object Security</keyword>
    <keyword>X.509 Certificate</keyword>

    <abstract>
      <t>
        The DNS-Based Authentication of Named Entities (DANE) TLSA specification <xref target="RFC6698" format="default" /> and The DNS-Based Authentication of Named Entities (DANE) Protocol: Updates and Operational Guidance <xref target="RFC7671" format="default" /> describe how to publish Transport Layer Security (TLS) server certificates or public keys in the DNS. This document updates <xref target="RFC6698" /> and <xref target="RFC7671" />. It describes how to use the TLSA record to enable entity and CA certificate discovery for object security and trust chain discovery use cases, and how to use PKIX validation for TLSA records queried without the benefit of DNSSEC.
    </t>
  </abstract>

</front>

<middle>

  <section anchor="intro" title="Background and Motivation" numbered="true" toc="default">
    <section anchor="background" title="Background" numbered="true" toc="default">
      <t>
        A digital identity consists of at least two essential elements: a name, and a method for proving ownership of the name. Digital identities are often represented using <xref target="RFC5280" format="default">X.509 certificates</xref>, which bind a name to a public key under a certification authority's signature. This allows all entities which trust the certification authority to trust that the public key associated with the name in the certificate is authentic and unaltered. The public key may be used for authentication, in the establishment of a secure session between two entities using a protocol like TLS or DTLS. The public key in the certificate may also be used to provide object security mechanisms like cryptographic signature verification or payload encryption. The certificate discovery process for object security usually relies on either in-band transmission of the certificate by the sender (IEEE 802.11p DSRC), or out-of-band via a proprietary API presented by the certification authority.
      </t>
    </section>
    <section anchor="motivation" title="Motivation" numbered="true" toc="default">
      <t>
        Internet of Things (IoT) applications increasingly need to authenticate messages sent through decoupled applications. Without some sort of message security mechanism in place, trust in sender identity is assumed based on the trustworthiness of all systems and networks involved in handling the message between the sending entity and the recipient. This document proposes the use of the DANE TLSA record for certificate discovery, and provides an optional method for certificate authentication, in the event DNSSEC is not available.
      </t>
    </section>
  </section>
  <section anchor="terms" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119" /> <xref target="RFC8174" /> when, and only when, they appear in all capitals, as shown here.</t>
  </section>
  <section anchor="auth_model" title="Authentication Model" numbered="true" toc="default">
    <section anchor="obj_sign_encrypt" title="Object Signing And Encryption" numbered="true" toc="default">
      <t>
	    An entity which generates a cryptographic signature for a message has an associated name in DNS, where a TLSA record may be found containing the entity's certificate. The entity's certificate contains the public key which can be used to authenticate the signature.
      </t>
      <t>
      Likewise, an entity which can receive messages encrypted using a public key (either directly, or by way of a key-wrapping technique) has a DNS-based identity where a public key suitable for message encryption can be found.
      </t>
    </section>
    <section anchor="trust_anchors" title="Trust Anchors" numbered="true" toc="default">
      <t>
      A PKIX-CD identity has a discoverable certificate and trust anchor. The trust anchor MAY be used by a TLS server to populate a local certificate store for the purpose of enabling traditional PKI-based mutual TLS. This approach comes with constraints and caveats, as described in <xref target="security">Security</xref>, below. The use of PKIX-CD for enabling mutual TLS is a wrapper for PKI-based mutual authentication, and does not change the way that TLS operates. This approach provides a transitional state from PKIX-based DANE to DNSSEC-based DANE for mutual TLS authentication. Trust anchor discovery MAY happen on-the-fly within the TLS handshake only when using DNSSEC-based DANE.
      </t>
    </section>
    <section anchor="trust_model" title="Trust Model For DNS-Based Identities" numbered="true" toc="default">
      <t>
	    DNSSEC SHOULD be used to ensure the integrity of the certificate presented via the TLSA record. For a variety of reasons, DNSSEC is not ubiquitous across the entire DNS namespace. For zones which are not protected by DNSSEC, the CA certificate which can be used to verify the certificates presented by the TLSA records MUST be retrieved from a known location derived from the identity’s full DNS name.
      </t>
    </section>
    <section anchor="naming_convention" title="DNS Naming Convention Or Labeling Format" numbered="true" toc="default">
      <t>
        This document defines a specific label or DNS naming format for the TLSA DNS records which carry entity certificates, and this format is compatible with the <xref target="TLSCLIENTID" format="default" />. This is necessary to provide a well-known location for securely retrieving a CA certificate which can be used to verify certificates retrieved from DNS without the benefit of DNSSEC.
      </t>
      <t>
      For a device identity with DNS name a1b2c3._device.subdomain.organization.example, we can decompose the DNS name into a few important parts:
      </t>
        <ul>
          <li>a1b2c3: device identifier</li>
          <li>_device: identity grouping label</li>
          <li>subdomain: organizational label</li>
          <li>organization.example: organizational domain</li>
          <li>_device.subdomain.organization.example: identity domain</li>
        </ul>
      <t>
        The device identifier MAY consist of multiple labels, but for simplicity’s sake we will represent it here as only one label.
      </t>
      <t>
        The identity grouping label is the rightmost label prefixed by an underscore, to the left of the organizational domain. This does not need to be immediately adjacent to the organizational domain; labels MAY exist between the identity grouping label and the organizational domain. In the above example, this is _device. Another example might be abc123._messagesender.subdomain.example.net, where the identity grouping label would be _messagesender.
      </t>
      <t>
        The organizational label(s) is any label existing between the identity grouping label and the organizational domain.
      </t>
      <t>
        The organizational domain is the domain that was registered with a domain name registrar.
      </t>
      <t>
        The identity domain is all labels from the top-level domain label through the identity grouping label.
      </t>
    </section>
    <section anchor="trust_anchor_discovery" title="Trust Anchor Discovery" numbered="true" toc="default">
      <t>
        In order to authenticate device certificates presented in TLSA records, without DNSSEC, we must safely obtain a CA certificate which can be used to verify the entity certificate.
      </t>
      <t>
        Using the components of the device name, together with the authorityKeyIdentifier (AKI) found in the entity certificate (described in <xref target="RFC5280" />), we can compose the URL where the signing certificate can be found. 
      </t>
      <t>
        The process whereby the signing certificate URL can be constructed for a device named a1b2c3._device.environment.example.net is as follows:
      </t>
        <ol>
          <li>Perform a DNS query for a1b2c3._device.environment.organization.example rrtype==TLSA.</li>
          <li>Extract the AKI from the certificate. We will use AA-BB-CC as the placeholder in this example.</li>
          <li>Identify the organizational domain: organization.example</li>
          <li>Identify any organizational labels: environment</li>
          <li>Identify the identity grouping label, and remove the underscore prefix: device</li>
          <li>Using the following pattern, create the hostname: ${IDENTITY_GROUPING_LABEL}.${ORGANIZATIONAL_LABELS}.${ORGANIZATIONAL_DOMAIN}: device.environment.organization.example</li>
          <li>Adding HTTPS and the AKI, build the authority URI: https://device.environment.organization.example/.well-known/ca/AA-BB-CC.pem</li>
        </ol>
      <t>
        The file found at the URL MUST contain exactly one PEM-encoded CA certificate. The HTTPS server presenting the file MUST use TLS with a certificate that can be validated to the TLS client’s client root certificate store, if DANE is not used for the server’s identity. The certificate in the PEM file does not need to chain to the TLS client’s root certificate store. 
      </t>
      <t>
        A PEM-encoded certificate being presented by a server possessing a DANE or Web PKI-validated identity is sufficient to indicate the trustworthiness of the CA certificate for validating certificates presented for associated identities. In this example, the certificate found at https://device.environment.organization.example/.well-known/ca/AA-BB-CC.pem MAY be cached and used to validate PKIX-CD certificates with identities matching *._device.environment.example.net, if the certificates contain AKI AA-BB-CC.
      </t>
      <t>
        The chain of trust from signing certificate to root certificate may be discovered using the authorityInfoAccess (<xref target="RFC5280" /> section 4.2.2.1) extension within the certificate, or by substituting the authorityKeyIdentifier in the signing certificate for the AKI in the authority URI, and querying the updated authority URI. This process may be repeated to retrieve the entire trust chain, the root certificate of which is useful for enabling certificate-based authentication for TLS clients.
      </t>
      <t>
      Benefits of this approach:
      </t>
        <ul>
          <li>
        This method uses an HTTPS server as a content-addressable storage mechanism for public keys in CA certificates. The HTTPS server MAY host any number of CA certificates, and the HTTPS server does not need to provide any directory listing service. This makes the discovery of CA certificates possible by already knowing an identity's AKI, and the entire CA bundle for the zone is not required to be distributable as a bundle.
          </li>
          <li>
        Device identities exist in a zone apart from other identities, which may have granular management access controls applied.
          </li>
          <li>
        The DNS record used for locating the CA certificates does not exist in the same zone as the records it is used to verify. The zone where the authority record is located may have granular rules applied which create compartmentalized failure zones. If the device identity zone is compromised, altered certificates will not validate unless the authority server can also be impersonated.
          </li>
        </ul>
    </section>
  </section>
  <section anchor="dane_update" title="Update to DANE" numbered="true" toc="default">
    <t>The method of certificate discovery via TLSA records, without DNSSEC, SHALL be referred to as PKIX-CD, and shall use the DANE Certificate Usage value of 4. The presence of the certificate usage value 4 indicates that the party requesting the certificate is responsible for validating it using the CA certificate located at the authority URL, which can be composed using the process described above.</t>
  </section>
  <section anchor="pkix_constraints" title="PKIX Constraints" numbered="true" toc="default">
    <t>The certificates presented with PKIX-CD MUST contain the subjectAlternativeName OID, with at least one dNSName which matches the DNS name used to retrieve the certificate. A certificate which is delivered without the benefit of DNSSEC, even if the CA's signature is valid, MUST NOT be trusted without alignment between the DNS name used to retrieve the certificate and one DNSName attribute within the certificate. The SubjectAlternativeName field MAY have other entries in addition to the one which aligns with the DNS name where the certificate can be discovered.</t>
  </section>
<section anchor="IANA" numbered="true" toc="default">
  <name>IANA Considerations</name>
  <t>This draft updates the TLSA Certificate Usages registry maintained at https://www.iana.org/assignments/dane-parameters/dane-parameters.xhtml#certificate-usages to add the following value:</t>
  <table>
    <tbody>
      <tr>
        <td>Value</td>
        <td>Acronym</td>
        <td>Short Description</td>
        <td>Reference</td>
      </tr>
      <tr>
        <td>4</td>
        <td>PKIXCD</td>
        <td>PKI-Auth Cert Discovery</td>
        <td><xref target="PKIXCD" format="default" /></td>
      </tr>
    </tbody>
  </table>
</section>

<section anchor="security" title="Security Considerations" numbered="true" toc="default">
  <t>
    This document updates RFC 6698 by defining the use of the TLSA record for discovering client TLS certificates and associated CA certificates. However, the security model presented here is quite different than the security model presented in RFC 6698. RFC 6698 relies on DNSSEC as the public key infrastructure (PKI) used for validating certificates (or certificate metadata) presented via TLSA resource records in DNS. This draft proposes the use of Web PKI as the root of trust, in the event the zone presenting TLSA records for this use case is not protected by DNSSEC. Web PKI's root of trust is in the browser CA bundle, and the substitution of Web PKI for the DNSSEC PKI trades the security implications of DNSSEC for Web PKI.
  </t>
  <t>
    Because PKIX-CD can provide an avenue for certificate chain discovery, care must be taken to ensure that identities are authenticated via the correct chain. There may be a desire to locally cache all discovered CA certificates into a general certificate store. This must not happen without certain controls in place. Without the identity consumer (authenticator) ensuring that the signing certificate for a particular zone is only used to verify certificates ONLY from that particular zone, cross-domain impersonation (is this a cousin of the confused deputy problem?) may be possible. An example of this is an application where organization.example and supplier.example both present identities via PKIX-CD. If the CA certificates from organization.example and supplier.example are loaded into a local certificate store and used for authenticating certificates from both zones, then devices under supplier.example may be deemed authentic even if signed by organization.example.
  </t>
  </section>

</middle>

<!--  *****BACK MATTER ***** -->

<back>
<references>
  <name>References</name>
  <references>
    <name>Normative References</name>
    <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml" />
    <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml" />
    <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6698.xml" />
    <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7671.xml" />
    <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml" />
    <reference anchor="TLSCLIENTID" target="https://tools.ietf.org/html/draft-huque-tls-dane-clientid">
      <front>
        <title>TLS Extension for DANE Client Identity</title>
        <author fullname="Shumon Huque" initials="S" surname="Huque" />
        <author fullname="Viktor Dukhovni" initials="V" surname="Dukhovni" />
      </front>
    </reference>
    <reference anchor="PKIXCD" target="https://tools.ietf.org/html/draft-wilson-dane-pkix-cd">
      <front>
        <title>DANE PKIX Certificate Discovery</title>
        <author fullname="Ash Wilson" initials="A" surname="Wilson" />
        <author fullname="Shumon Huque" initials="S" surname="Huque" />
      </front>
    </reference>
  </references>
</references>

</back>

</rfc>